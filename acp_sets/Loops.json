[
    {
        "question": "What Python function adds indices to a loop?",
        "answer": "Enumerate"
    },
    {
        "question": "What is used for iterating over a sequence of numbers?",
        "answer": "Range"
    },
    {
        "question": "What technique optimizes nested loops?",
        "answer": "Loop unrolling"
    },
    {
        "question": "What is a function that computes values lazily?",
        "answer": "Generator"
    },
    {
        "question": "What type of loop should be used cautiously to avoid infinite loops?",
        "answer": "While"
    },
    {
        "question": "What block runs if a loop completes without a break?",
        "answer": "Else"
    },
    {
        "question": "What Python feature is useful for searching through lists?",
        "answer": "For-else"
    },
    {
        "question": "What is more memory efficient than storing large datasets in memory?",
        "answer": "Generator expression"
    },
    {
        "question": "Which library provides advanced iteration functions like combinations?",
        "answer": "itertools"
    },
    {
        "question": "What loop combines performance and readability in Python?",
        "answer": "For"
    },
    {
        "question": "What technique optimizes loops in terms of performance?",
        "answer": "Generator functions"
    },
    {
        "question": "What Python loop executes based on conditions?",
        "answer": "While"
    },
    {
        "question": "What Python function is used to create combinations and permutations?",
        "answer": "itertools"
    },
    {
        "question": "What is the primary advantage of using generator expressions?",
        "answer": "Memory efficiency"
    },
    {
        "question": "What should be avoided in while loops to prevent unexpected behavior?",
        "answer": "Infinite loop"
    }
]
