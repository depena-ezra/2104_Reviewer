[
    {
        "question": "What ensures your programs fail gracefully in Python?",
        "answer": "Error handling"
    },
    {
        "question": "What block is used to catch and handle exceptions in Python?",
        "answer": "Try-except"
    },
    {
        "question": "What clause runs when no exceptions occur?",
        "answer": "Else"
    },
    {
        "question": "What block is used for cleanup actions in error handling?",
        "answer": "Finally"
    },
    {
        "question": "What class can you subclass to create custom exceptions?",
        "answer": "Exception"
    },
    {
        "question": "What provides details about where an error occurred in Python?",
        "answer": "Traceback"
    },
    {
        "question": "Which module allows you to record errors and events?",
        "answer": "Logging"
    },
    {
        "question": "What Python feature can centralize error handling logic?",
        "answer": "Decorators"
    },
    {
        "question": "Which common error occurs when trying to access an index that doesn’t exist?",
        "answer": "IndexError"
    },
    {
        "question": "Which common error occurs when a key is missing in a dictionary?",
        "answer": "KeyError"
    },
    {
        "question": "Which common error occurs when an attribute is accessed that doesn’t exist?",
        "answer": "AttributeError"
    },
    {
        "question": "What method is ideal for closing files or database connections?",
        "answer": "Finally"
    },
    {
        "question": "What allows multiple exceptions to be handled in one block?",
        "answer": "Tuple"
    },
    {
        "question": "What is used for custom exception behavior in Python?",
        "answer": "Subclassing"
    },
    {
        "question": "What can make debugging complex systems easier by recording events?",
        "answer": "Logging"
    }
]
